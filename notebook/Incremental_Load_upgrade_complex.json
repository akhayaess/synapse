{
	"name": "Incremental_Load_upgrade_complex",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "40649a58-a0d7-402a-85d7-8f348f1a2122"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/0328350c-f7d1-4ca4-8da5-485b8f684719/resourceGroups/RG_DA_1/providers/Microsoft.Synapse/workspaces/asa-rg-da-1/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://asa-rg-da-1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"print(\"Notebook Session is started\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run Mounted_Notebook"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"container_mount_point('sales','Azb','hotandcoldstorage','abc')"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"jobId=mssparkutils.env.getJobId()\r\n",
					"ls_path='synfs:/'+jobId+'/abc/rkem/move/transaction'\r\n",
					"file_infos=mssparkutils.fs.ls(ls_path)\r\n",
					"# print(file_infos)\r\n",
					"print(ls_path)\r\n",
					""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from datetime import datetime\r\n",
					"\r\n",
					"# df = spark.read.json('synfs:/'+jobId+'/abc/JSON DUMP')\r\n",
					"# df=df.select(df[\"end_time\"])\r\n",
					"# df=df.orderBy(\"end_time\")\r\n",
					"latest_date_time=\"2023-05-15\"\r\n",
					"latest_date_time = datetime.fromisoformat(latest_date_time)\r\n",
					"print(latest_date_time)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"startDate=\"2023-05-14\"\r\n",
					"endDate=\"2023-05-20\"\r\n",
					"startDate =datetime.strptime(startDate, \"%Y-%m-%d\").date()\r\n",
					"endDate= datetime.strptime(endDate, \"%Y-%m-%d\").date()"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col\r\n",
					"from datetime import datetime,date,timedelta\r\n",
					"import os\r\n",
					"# Create a SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"path = \"/\" + ls_path.replace(\":\", \"\")\r\n",
					"fpaths = [path +'/'+ fd for fd in os.listdir(path)]\r\n",
					"print(fpaths)\r\n",
					"\r\n",
					"# Create a list of dictionaries with the file information\r\n",
					"data = []\r\n",
					"for fpath in fpaths:\r\n",
					"    if 'date' in fpath.split(\"/\")[-1]:\r\n",
					"        expression=datetime.strptime(fpath.split(\"/\")[-1].split(\"=\")[-1].strip(), \"%Y-%m-%d\").date()\r\n",
					"        if expression>startDate and expression<=endDate:\r\n",
					"            # print(fpath)\r\n",
					"            # print(expression)\r\n",
					"            loop_df =spark.read.format(\"delta\").load(fpath)\r\n",
					"            loop_df= loop_df.filter(split(col(\"arr_datetime_dttm\"), \" \")[0] <= expression)\r\n",
					"            loop_df.write.format(\"delta\").mode(\"overwrite\").save(fpath)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"      \r\n",
					"\r\n",
					"#             \r\n",
					"\r\n",
					"# # Create a DataFrame from the list of dictionaries\r\n",
					"# df = spark.createDataFrame(data)\r\n",
					"\r\n",
					"# # # Show the DataFrame\r\n",
					"# display(df)\r\n",
					""
				],
				"execution_count": 45
			}
		]
	}
}