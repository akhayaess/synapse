{
	"name": "WebEC Transload facility for different FTS databases_Incremental",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f4863cc3-8947-4351-a6d4-134b94ae9661"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/0328350c-f7d1-4ca4-8da5-485b8f684719/resourceGroups/RG_DA_1/providers/Microsoft.Synapse/workspaces/asa-rg-da-1/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://asa-rg-da-1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from datetime import datetime\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from azure.storage.blob import BlobServiceClient\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from py4j.java_gateway import java_import, JavaClass\r\n",
					"from datetime import datetime\r\n",
					"from datetime import date\r\n",
					"\r\n",
					"\r\n",
					"# Import the necessary Java classes\r\n",
					"\r\n",
					"\r\n",
					"blob_account_name = 'wndnamclcdteus2adl'\r\n",
					"blob_container_name = 'silver'\r\n",
					"linked_service_name ='ls_PT_wndnamclcdteus2adl_silver'\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)\r\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run Mounted_Notebook"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"container_mount_point('sales','Azb','hotandcoldstorage','mnt')"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"jobId=mssparkutils.env.getJobId()\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"blob_relative_path_inbnd_equipment_tbl_audit_equipstatusid = 'webec/dbo/tables/inbnd_equipment_tbl_audit_equipstatusid/' \r\n",
					"startDate=\"2023-01-01\"\r\n",
					"endDate=\"2023-06-26\"\r\n",
					"startDate = datetime.strptime(startDate, \"%Y-%m-%d\").date()\r\n",
					"endDate= datetime.strptime(endDate, \"%Y-%m-%d\").date()\r\n",
					"\r\n",
					"wasb_path_inbnd_equipment_tbl_audit_equipstatusid = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_inbnd_equipment_tbl_audit_equipstatusid)\r\n",
					"temp = spark.read.parquet(wasb_path_inbnd_equipment_tbl_audit_equipstatusid)\r\n",
					"java_import(spark._jvm, \"org.apache.hadoop.fs.FileSystem\")\r\n",
					"java_import(spark._jvm, \"org.apache.hadoop.fs.Path\")\r\n",
					"java_import(spark._jvm, \"org.apache.hadoop.fs.FileStatus\")\r\n",
					"java_import(spark._jvm, \"java.net.URI\")\r\n",
					"conf = spark._jsc.hadoopConfiguration()\r\n",
					"URI = spark._jvm.java.net.URI\r\n",
					"\r\n",
					"fs = spark._jvm.FileSystem.get(URI.create(wasb_path_inbnd_equipment_tbl_audit_equipstatusid), conf)\r\n",
					"file_path_inbnd_equipment_tbl_audit_equipstatusid =\"/\"+blob_relative_path_inbnd_equipment_tbl_audit_equipstatusid\r\n",
					"status = fs.listStatus(spark._jvm.Path(file_path_inbnd_equipment_tbl_audit_equipstatusid))\r\n",
					"file_paths_inbnd_equipment_tbl_audit_equipstatusid = []\r\n",
					"for fileStatus in status:\r\n",
					"    modified_time = fileStatus.getModificationTime()\r\n",
					"    modified_date = datetime.fromtimestamp(modified_time / 1000).date()  \r\n",
					"    if modified_date>=startDate and modified_date<=endDate:\r\n",
					"        # print(modified_date)\r\n",
					"    \r\n",
					"        file_paths_inbnd_equipment_tbl_audit_equipstatusid.append(wasb_path_inbnd_equipment_tbl_audit_equipstatusid+\"/\"+fileStatus.getPath().getName())\r\n",
					"inbnd_equipment_tbl_audit_equipstatusid_data = spark.read.parquet(*file_paths_inbnd_equipment_tbl_audit_equipstatusid)\r\n",
					"inbnd_equipment_tbl_audit_equipstatusid_data.createOrReplaceTempView('inbnd_equipment_tbl_audit_equipstatusid')\r\n",
					"\r\n",
					"#__________________________________________________________________________________________________________________________________\r\n",
					"blob_relative_path_inbnd_equipment_tbl = 'webec/dbo/tables/inbnd_equipment_tbl/' \r\n",
					"wasb_path_inbnd_equipment_tbl = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_inbnd_equipment_tbl)\r\n",
					"fs = spark._jvm.FileSystem.get(URI.create(wasb_path_inbnd_equipment_tbl), conf)\r\n",
					"file_path_inbnd_equipment_tbl =\"/\"+blob_relative_path_inbnd_equipment_tbl\r\n",
					"status = fs.listStatus(spark._jvm.Path(file_path_inbnd_equipment_tbl))\r\n",
					"file_paths_inbnd_equipment_tbl = []\r\n",
					"for fileStatus in status:\r\n",
					"    modified_time = fileStatus.getModificationTime()\r\n",
					"    modified_date = datetime.fromtimestamp(modified_time / 1000).date()  \r\n",
					"    if modified_date>=startDate and modified_date<=endDate:\r\n",
					"        # print(modified_date)\r\n",
					"    \r\n",
					"        file_paths_inbnd_equipment_tbl.append(wasb_path_inbnd_equipment_tbl+\"/\"+fileStatus.getPath().getName())\r\n",
					"inbnd_equipment_tbl_data = spark.read.parquet(*file_paths_inbnd_equipment_tbl)\r\n",
					"inbnd_equipment_tbl_data.createOrReplaceTempView('inbnd_equipment_tbl')\r\n",
					"#______________________________________________________________________________________________________\r\n",
					"blob_relative_path_walmart = 'webfts/walmart/dbo/tables/tblfts_containerheader/' \r\n",
					"wasb_path_walmart = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_walmart)\r\n",
					"fs = spark._jvm.FileSystem.get(URI.create(wasb_path_walmart), conf)\r\n",
					"file_path_walmart =\"/\"+blob_relative_path_walmart\r\n",
					"status = fs.listStatus(spark._jvm.Path(file_path_walmart))\r\n",
					"file_paths_walmart = []\r\n",
					"for fileStatus in status:\r\n",
					"    modified_time = fileStatus.getModificationTime()\r\n",
					"    modified_date = datetime.fromtimestamp(modified_time / 1000).date()  \r\n",
					"    if modified_date>=startDate and modified_date<=endDate:\r\n",
					"        # print(modified_date)\r\n",
					"    \r\n",
					"        file_paths_walmart.append(wasb_path_walmart+\"/\"+fileStatus.getPath().getName())\r\n",
					"walmart_data = spark.read.parquet(*file_paths_walmart)\r\n",
					"walmart_data.createOrReplaceTempView('walmart')\r\n",
					"#________________________________________________________________________________________________________________________\r\n",
					"blob_relative_path_gap = 'webfts/gap/dbo/tables/tblFTS_ContainerHeader/' \r\n",
					"wasb_path_gap = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_gap)\r\n",
					"fs = spark._jvm.FileSystem.get(URI.create(wasb_path_gap), conf)\r\n",
					"file_path_gap =\"/\"+blob_relative_path_gap\r\n",
					"status = fs.listStatus(spark._jvm.Path(file_path_gap))\r\n",
					"file_paths_gap = []\r\n",
					"for fileStatus in status:\r\n",
					"    modified_time = fileStatus.getModificationTime()\r\n",
					"    modified_date = datetime.fromtimestamp(modified_time / 1000).date()  \r\n",
					"    if modified_date>=startDate and modified_date<=endDate:\r\n",
					"        # print(modified_date)\r\n",
					"    \r\n",
					"        file_paths_gap.append(wasb_path_gap+\"/\"+fileStatus.getPath().getName())\r\n",
					"gap_data = spark.read.parquet(*file_paths_gap)\r\n",
					"gap_data.createOrReplaceTempView('gap')\r\n",
					"#__________________________________________________________________________________________________________________________\r\n",
					"blob_relative_path_hudd = 'webfts/hudd/dbo/tables/tblfts_containerheader/' \r\n",
					"wasb_path_hudd = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_hudd)\r\n",
					"fs = spark._jvm.FileSystem.get(URI.create(wasb_path_hudd), conf)\r\n",
					"file_path_hudd =\"/\"+blob_relative_path_hudd\r\n",
					"status = fs.listStatus(spark._jvm.Path(file_path_hudd))\r\n",
					"file_paths_hudd = []\r\n",
					"for fileStatus in status:\r\n",
					"    modified_time = fileStatus.getModificationTime()\r\n",
					"    modified_date = datetime.fromtimestamp(modified_time / 1000).date()  \r\n",
					"    if modified_date>=startDate and modified_date<=endDate:\r\n",
					"        # print(modified_date)\r\n",
					"    \r\n",
					"        file_paths_hudd.append(wasb_path_hudd+\"/\"+fileStatus.getPath().getName())\r\n",
					"hudd_data = spark.read.parquet(*file_paths_hudd)\r\n",
					"hudd_data.createOrReplaceTempView('hudd')"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"blob_relative_path_comm_equipmentstatus_tbl = 'webec/dbo/tables/comm_equipmentstatus_tbl/' \r\n",
					"wasb_path_comm_equipmentstatus_tbl = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_comm_equipmentstatus_tbl)\r\n",
					"comm_equipmentstatus_tbl_data = spark.read.parquet(wasb_path_comm_equipmentstatus_tbl)\r\n",
					"comm_equipmentstatus_tbl_data.createOrReplaceTempView('comm_equipmentstatus_tbl')\r\n",
					"\r\n",
					"\r\n",
					"# blob_relative_path_comm_country_tbl = 'webec/dbo/tables/comm_country_tbl/' \r\n",
					"# wasb_path_comm_country_tbl = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_comm_country_tbl)\r\n",
					"# comm_country_tbl_data = spark.read.parquet(wasb_path_comm_country_tbl)\r\n",
					"# comm_country_tbl_data.createOrReplaceTempView('comm_country_tbl')\r\n",
					"\r\n",
					"comm_country_tbl_data = spark.read.parquet(\"synfs:/\"+jobId+\"/mnt/Country_Table\")\r\n",
					"comm_country_tbl_data.createOrReplaceTempView('comm_country_tbl')\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"blob_relative_path_comm_vessel_tbl = 'webec/dbo/tables/comm_vessel_tbl/' \r\n",
					"wasb_path_comm_vessel_tbl = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_comm_vessel_tbl)\r\n",
					"comm_vessel_tbl_data = spark.read.parquet(wasb_path_comm_vessel_tbl)\r\n",
					"comm_vessel_tbl_data.createOrReplaceTempView('comm_vessel_tbl')\r\n",
					"\r\n",
					"blob_relative_path_comm_vesselvoy_tbl = 'webec/dbo/tables/comm_vesselvoy_tbl/' \r\n",
					"wasb_path_comm_vesselvoy_tbl = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_comm_vesselvoy_tbl)\r\n",
					"comm_vesselvoy_tbl_data = spark.read.parquet(wasb_path_comm_vesselvoy_tbl)\r\n",
					"comm_vesselvoy_tbl_data.createOrReplaceTempView('comm_vesselvoy_tbl')\r\n",
					"\r\n",
					"blob_relative_path_comm_harbor_tbl = 'webec/dbo/tables/comm_harbor_tbl/' \r\n",
					"wasb_path_comm_harbor_tbl = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_comm_harbor_tbl)\r\n",
					"comm_harbor_tbl_data = spark.read.parquet(wasb_path_comm_harbor_tbl)\r\n",
					"comm_harbor_tbl_data.createOrReplaceTempView('comm_harbor_tbl')\r\n",
					"\r\n",
					"blob_relative_path_comm_destination_tbl = 'webec/dbo/tables/comm_destination_tbl/'\r\n",
					"wasb_path_comm_destination_tbl = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_comm_destination_tbl)\r\n",
					"comm_destination_tbl_data = spark.read.parquet(wasb_path_comm_destination_tbl)\r\n",
					"comm_destination_tbl_data.createOrReplaceTempView('comm_destination_tbl')\r\n",
					"\r\n",
					"blob_relative_path_comm_customer_tbl = 'webec/dbo/tables/comm_customer_tbl/' \r\n",
					"wasb_path_comm_customer_tbl = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path_comm_customer_tbl)\r\n",
					"comm_customer_tbl_data = spark.read.parquet(wasb_path_comm_customer_tbl)\r\n",
					"comm_customer_tbl_data.createOrReplaceTempView('comm_customer_tbl')\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					" \r\n",
					""
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"tmpAES1_v = spark.sql( \"\"\"Select inbndequip_id,\r\n",
					"                                inbndequip_number,\r\n",
					"                                timeaudit,\r\n",
					"                                equipstatus_id,\r\n",
					"                                audit_user,\r\n",
					"                                audit_log_type                                                                    \r\n",
					"From \r\n",
					"\t(SELECT                  inbndequip_id,\r\n",
					"\t\t\t\t\t\t\t inbndequip_number,\r\n",
					"\t\t\t\t\t\t\t timeaudit,\r\n",
					"\t\t\t\t\t\t\t equipstatus_id,\r\n",
					"\t\t\t\t\t\t\t audit_user,\r\n",
					"\t\t\t\t\t\t\t audit_log_type                                             \r\n",
					"\t\t\t\t\t  FROM   (SELECT inbndequip_id,\r\n",
					"\t\t\t\t\t\t\t\t\t inbndequip_number,\r\n",
					"\t\t\t\t\t\t\t\t\t audit_changed    AS TimeAudit,\r\n",
					"\t\t\t\t\t\t\t\t\t equipstatus_id,\r\n",
					"\t\t\t\t\t\t\t\t\t audit_user     AS Audit_User,\r\n",
					"\t\t\t\t\t\t\t\t\t audit_log_type  ,                               \r\n",
					"\t\t\t\t\t\t\t\t\t Row_number()\r\n",
					"\t\t\t\t\t\t\t\t\t   OVER (\r\n",
					"\t\t\t\t\t\t\t\t\t\t partition BY inbndequip_id, equipstatus_id\r\n",
					"\t\t\t\t\t\t\t\t\t\t ORDER BY audit_log_type) AS Position\r\n",
					"\t\t\t\t\t\t\t  FROM   inbnd_equipment_tbl_audit_equipstatusid)\r\n",
					"\t\t\t\t\t\t\t AS TEMP\r\n",
					"\t\t\t\t\t  WHERE  position = 1) A \"\"\")\r\n",
					"tmpAES1_v.createOrReplaceTempView('tmpAES1')\r\n",
					"display(tmpAES1_v)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"tmpeqpStatus_v = spark.sql(\"\"\"Select inbndequip_id\r\n",
					"      ,container_status\r\n",
					"From(\r\n",
					"\t\tSELECT inbndequip_id,\r\n",
					"\t\tconcat_ws(',', collect_list(EquipStatus_Desc)) container_status\r\n",
					"\t\tFROM (\r\n",
					"\t\t\tSELECT  ROW_NUMBER() OVER (PARTITION BY E.inbndequip_id ORDER BY E.timeaudit, E.Audit_log_type DESC) AS RNO\r\n",
					"\t\t\t\t,E.inbndequip_id\r\n",
					"\t\t\t\t,E.timeaudit\r\n",
					"\t\t\t\t,ES. EquipStatus_Desc\r\n",
					"\t\t\t\t,E.audit_log_type                                               \r\n",
					"\t\t\tFROM tmpAES1 E\r\n",
					"\t\t\tLeft Join\r\n",
					"\t\tcomm_equipmentstatus_tbl ES \r\n",
					"\t\ton  ES.EquipStatus_ID= E.equipstatus_id\r\n",
					"\t\t\tORDER BY RNO\r\n",
					"\t\t\t) A\r\n",
					"\t\r\n",
					"\t\tGROUP BY inbndequip_id\r\n",
					"\t\t\t,RNO \r\n",
					"\t) A \"\"\")\r\n",
					"tmpeqpStatus_v.createOrReplaceTempView('tmpeqpStatus')\r\n",
					"\r\n",
					"display(tmpeqpStatus_v)\r\n",
					""
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"tmpinbndContainer_Onwater_QuickClose_v = spark.sql(\r\n",
					"\"\"\"Select inbndequip_id\r\n",
					"From(\r\n",
					"select inbndEquip_ID  from (\r\n",
					"\t\t\t\t\t\t\tselect ies.inbndequip_id,ies.audit_changed,\r\n",
					"\t\t\t\t\t\t\tdatediff(MINUTE,ies.audit_changed,lag(ies.audit_changed) over (partition by ies.inbndequip_id order by ies.audit_changed)) as diff,\r\n",
					"\t\t\t\t\t\t\trow_number() over(partition by ies.inbndequip_id order by ies.audit_changed) as RowNum \r\n",
					"\t\t\t\t\t\t\tfrom inbnd_equipment_tbl_audit_equipstatusid ies\r\n",
					"\t\t\t\t\t\t\tleft join comm_equipmentstatus_tbl es\r\n",
					"\t\t\t\t\t\t\ton ies.EquipStatus_ID=es.EquipStatus_ID\r\n",
					"\t\t\t\t\t\t\twhere ies.inbndEquip_ID in\r\n",
					"\t\t\t\t\t\t\t(Select distinct inbndequip_id from tmpeqpStatus where container_status \r\n",
					"\t\t\t\t\t\t\tin ('On water,Closed','Closed,On Water')))A\r\n",
					"                     where A.RowNum=2 and A.diff<=1\r\n",
					"\t\t)A\r\n",
					" \"\"\")\r\n",
					"tmpinbndContainer_Onwater_QuickClose_v.createOrReplaceTempView('tmpinbndContainer_Onwater_QuickClose')\r\n",
					"tmpinbndContainer_Onwater_QuickClose_v.show()\r\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"current_date = date.today()\r\n",
					"tmpinbndContainer_DifferentFTS_v = spark.sql(\"\"\"Select inbndequip_id\r\n",
					"From(\r\n",
					"select DISTINCT inbndEquip_ID  \r\n",
					"FROM (                    \t--\t\t\tSELECT THD.InbndEquip_ID FROM WebFTS_THD..tblFTS_ContainerHeader THD \r\n",
					"\t\t\t--\tUNION  \r\n",
					"\t\t\t\t\t\t\tSELECT WLM.InbndEquip_ID FROM walmart WLM \r\n",
					"\t\t\t\tUNION\t\r\n",
					"\t\t\t\r\n",
					"\t\t\t\tSELECT GAP.InbndEquip_ID FROM gap GAP \r\n",
					"                UNION\r\n",
					"                    SELECT HUDD.InbndEquip_ID FROM hudd HUDD\r\n",
					"                --\tUNION   \r\n",
					"\t\t\t\t--SELECT TGT.InbndEquip_ID FROM WebFTS_TGT..tblFTS_ContainerHeader TGT \r\n",
					"\t\t\t\t--\tUNION  \r\n",
					"\t\t\t--\tSELECT WMC.InbndEquip_ID FROM WebFTS_WMC..tblFTS_ContainerHeader WMC \r\n",
					"\t\t\t\t  --UNION  \r\n",
					"\t\t\t\t--  SELECT JCP.InbndEquip_ID FROM WebFTS_JCP..tblFTS_ContainerHeader JCP \r\n",
					"\t\t\t\t  --UNION  \r\n",
					"\t\t\t\t -- SELECT SAM.InbndEquip_ID FROM WebFTS_SAMS..tblFTS_ContainerHeader SAM \r\n",
					"\t\t\t\t-- UNION\r\n",
					"\r\n",
					"\t\t\t\t--SELECT LAT.InbndEquip_ID FROM WebFTS_SN..tblFTS_ContainerHeader LAT \r\n",
					"\r\n",
					"\t)M )FTS\"\"\")\r\n",
					"tmpinbndContainer_DifferentFTS_v.createOrReplaceTempView('tmpinbndContainer_DifferentFTS')\r\n",
					"# display(tmpinbndContainer_DifferentFTS_v)\r\n",
					"# tmpinbndContainer_DifferentFTS_v.write.format(\"parquet\").save(\"synfs:/\"+jobId+\"/mnt/parquet_incremental/date_part=\"+str(current_date))\r\n",
					""
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"main_result = spark.sql(\"\"\"SELECT --Cust.Cust_Desc as Customer,\r\n",
					"IE.inbndequip_id                      AS Equipment_ID,\r\n",
					"IE.inbndequip_number                  AS Container_Number,\r\n",
					"IE.cust_id\t\t\t\t\t\t\t  AS Customer_ID,\r\n",
					"Case when AES.container_status is not null\r\n",
					"     then AES.container_status\r\n",
					"\t else ESI.EquipStatus_Desc\r\n",
					"\t end AS Container_Status,\r\n",
					"--MF.Dest_Name AS Facility, \r\n",
					"CHASN.vcshippercountry                AS Origin_Country,\r\n",
					"C.country                             AS Origin_Country_Name,\r\n",
					"portoforigin                          AS Port_of_Discharge,\r\n",
					"--ss.SteamShip_Name as OBL SCAC,\r\n",
					"vv.vessel_name + \"/\" + vv.voyage_name AS Vessel_Voyage,\r\n",
					"VV.vesselvoy_id,\r\n",
					"IE.vcdischarge                        AS Discharged_Port,\r\n",
					"H.harbor_name                         AS Harbor,\r\n",
					"OrigDest.dest_id                      AS Original_Destination_ID,\r\n",
					"OrigDest.dest_name                    AS Original_Destination, /* Not required due to data sensitivity*/\r\n",
					"currentdest_id                        AS Current_Location_ID,\r\n",
					"CurrDest.dest_name                    AS Current_Location,\r\n",
					"dispatchdest_id                       AS Dispatch_Destination_ID,\r\n",
					"DispDest.dest_name                    AS Dispatch_Destination,  /* Not required due to data sensitivity*/\r\n",
					"IE.docreceived_fdt                    AS DOC_Rcvd,\r\n",
					"IE.asnreceived_fdt                    AS ASN_Received,\r\n",
					"--IE.dadreceived_fdt                    AS DAD_Received,\r\n",
					"VV.vessel_eta_fdt                     AS ETA,\r\n",
					"VV.vessel_ata_fdt                     AS ATA,\r\n",
					"IE.dtdischarge                        AS Off_Vessel_Date,\r\n",
					"IE.ready_fdt                          AS Ready_Date,\r\n",
					"IE.equipallocation_fdt                AS Alloc_Date,\r\n",
					"COALESCE(IE.equipeirout_fdt, IE.equipportout_fdt) AS Port_Gate_Out,\r\n",
					"IE.equipdispatchin_fdt                AS Dispatch_Date,\r\n",
					"--IE.equipportout_fdt                   AS Port_Gate_Out_Old,\r\n",
					"--IE.equipeirout_fdt                    AS EIR_Out_PierPass,\r\n",
					"IE.equipyardin_fdt                    AS Yard_Gate_In_Date,\r\n",
					"IE.equipempty_fdt                     AS Empty_Date,\r\n",
					"--IE.equipreload_fdt                    AS Reload_Date,\r\n",
					"IE.equipyardout_fdt                   AS Yard_Gate_Out,\r\n",
					"--IE.equipdispatchout_fdt               AS Dispatch_Yard_Out,\r\n",
					"COALESCE(IE.equipeirin_fdt,IE.equipportin_fdt) AS Port_Gate_In\r\n",
					"--IE.equipportin_fdt                    AS Port_Gate_In,\r\n",
					"--IE.equipeirin_fdt                     AS EIR_In_PierPass,\r\n",
					"--PierPass To Enter the port\r\n",
					"--IE.los_dt                             AS LOS_Date\r\n",
					"--CPO.[Container PO] AS Container_PO--Kseniia asked to remove this column\r\n",
					"--CD.biContainerDistro_ID AS Container_Distro_ID\r\n",
					" from (SELECT * from inbnd_equipment_tbl \r\n",
					"            \t\t\t\t\twhere inbndequip_id  not in \r\n",
					"\t\t\t\t\t\t\t\t\t(Select inbndequip_id from inbnd_equipment_tbl as IE\r\n",
					"\t\t                    \t\t\tLEFT JOIN comm_equipmentstatus_tbl ESI \r\n",
					"                              \t\t\tON IE.equipstatus_id = ESI.equipstatus_id  Where ESI.EquipStatus_Desc ='Cancel'\r\n",
					"                              \t\tUnion \r\n",
					"\t\t\t\t\t\t\t\t\tSelect distinct inbndequip_id from tmpAES1 as AES1\r\n",
					"\t\t\t\t\t\t\t\t\t\tLEFT JOIN comm_equipmentstatus_tbl ES\r\n",
					"\t\t\t\t\t\t\t\t\t\tON AES1.equipstatus_id = ES.equipstatus_id Where ES.EquipStatus_Desc ='Cancel'\r\n",
					"\t\t\t\t\t\t\t\t\tUnion\r\n",
					"\t\t\t\t\t\t\t\t\tselect inbndEquip_ID from tmpinbndContainer_Onwater_QuickClose\r\n",
					"\t\t\t\t\t\t\t\t\t)\r\n",
					"\t\t\t\t\t\t\t) AS IE\r\n",
					"\t\t\t\t\t\t\tJOIN \r\n",
					"\t\t\t\t\t\t\t(SELECT Temp.InbndEquip_ID,'' AS vcSHIPPERCountry FROM tmpinbndContainer_DifferentFTS Temp \r\n",
					"\t\t\t\t\t\t\t--\tUNION SELECT CH.InbndEquip_ID,'' AS ShipperCountry FROM tblFTS_ContainerHeader CH \r\n",
					"\t\t\t\t\t\t\t) AS CHASN\r\n",
					"\t\t\t\t\t\r\n",
					"         ON CHASN.inbndequip_id = IE.inbndequip_id\r\n",
					"\t\t LEFT JOIN comm_country_tbl C \r\n",
					"         ON C.code = CHASN.vcshippercountry\r\n",
					"         \r\n",
					"\t\t LEFT JOIN comm_vessel_tbl V \r\n",
					"\t\t\tON V.vessel_id = IE.originvessel_id\r\n",
					"\t\t\t LEFT JOIN comm_equipmentstatus_tbl ESI \r\n",
					"         ON IE.equipstatus_id = ESI.equipstatus_id --AND ESI.EquipStatus_Desc <>'Cancel'\r\n",
					"       LEFT JOIN comm_vesselvoy_tbl VV \r\n",
					"         ON VV.vesselvoy_id = V.vesselvoy_id\r\n",
					"       LEFT JOIN comm_harbor_tbl H\r\n",
					"         ON IE.pickupharbor_id = H.harbor_id\r\n",
					"       LEFT JOIN comm_destination_tbl MF \r\n",
					"         ON MF.dest_id = IE.managingfacilitydest_id\r\n",
					"       LEFT JOIN comm_destination_tbl CurrDest \r\n",
					"         ON CurrDest.dest_id = IE.currentdest_id\r\n",
					"       LEFT JOIN comm_destination_tbl OrigDest \r\n",
					"         ON OrigDest.dest_id = IE.originaldest_id\r\n",
					"       LEFT JOIN comm_destination_tbl DispDest \r\n",
					"         ON DispDest.dest_id = IE.dispatchdest_id\r\n",
					"       LEFT JOIN comm_customer_tbl Cust \r\n",
					"         ON IE.cust_id = Cust.cust_id --Dropping two records\r\n",
					"       LEFT JOIN tmpeqpStatus AS AES\r\n",
					"              ON IE.inbndequip_id = AES.inbndequip_id\r\n",
					"WHERE  vessel_eta_fdt >= '2018-01-01'\r\n",
					"\r\n",
					"\r\n",
					"/*and     Case when AES.container_status is not null\r\n",
					"\t\t\t\t\t\t\t\t\t\t\t then AES.container_status\r\n",
					"\t\t\t\t\t\t\t\t\t\t\t else ESI.EquipStatus_Desc\r\n",
					"\t\t\t\t\t\t\t\t\t\t\t end <>'Closed' */\r\n",
					"--LEFT JOIN (select inbndEquip_ID,SUBSTRING ((select (', '+rtrim(biContainerPO_ID)) from webfts_hudd.tblFTS_ContainerPO \r\n",
					"--                where inbndEquip_ID = CPO.inbndEquip_ID for xml path ('')),2,1000) as 'Container PO'             \r\n",
					"--      from webfts_hudd.tblFTS_ContainerPO CPO\r\n",
					"--      group by inbndEquip_ID) AS CPO ON IE.inbndEquip_ID = CPO.inbndEquip_ID\r\n",
					"--1,432,383\r\n",
					"--AND (c.Code IN ('CN'))\r\n",
					"--AND  ( C.code IN ( 'AF', 'AM', 'AZ', 'BH',\r\n",
					"--                     'BD', 'BT', 'BN', 'MM',\r\n",
					"--                     'KH', 'CN', 'CY', 'GE',\r\n",
					"--                     'IN', 'ID', 'IR', 'IL',\r\n",
					"--                     'IQ', 'JP', 'JO', 'KZ',\r\n",
					"--                     'KW', 'KG', 'LA', 'LB',\r\n",
					"--                     'MY', 'MV', 'MN', 'NP',\r\n",
					"--                     'KP', 'OM', 'PK', 'PH',\r\n",
					"--                     'QA', 'SA', 'SG', 'KR',\r\n",
					"--                     'LK', 'SY', 'TJ', 'TH',\r\n",
					"--                     'TL', 'TR', 'TM', 'AE',\r\n",
					"--                     'UZ', 'VN', 'YE' ,'NULL') )\r\n",
					"GROUP  BY IE.inbndequip_id,\r\n",
					"          IE.inbndequip_number,\r\n",
					"\t\t  IE.cust_id,\r\n",
					"\t\t  AES.container_status,\r\n",
					"\t\t  ESI.EquipStatus_Desc,\r\n",
					"          CHASN.vcshippercountry,\r\n",
					"          C.country,\r\n",
					"          portoforigin,\r\n",
					"          vv.vessel_name,\r\n",
					"          vv.voyage_name,\r\n",
					"          VV.vesselvoy_id,\r\n",
					"          IE.vcdischarge,\r\n",
					"          H.harbor_name,\r\n",
					"          OrigDest.dest_id,\r\n",
					"          OrigDest.dest_name,\r\n",
					"          currentdest_id,\r\n",
					"          CurrDest.dest_name,\r\n",
					"          dispatchdest_id,\r\n",
					"          DispDest.dest_name,\r\n",
					"          IE.asnreceived_fdt,\r\n",
					"          IE.dadreceived_fdt,\r\n",
					"          VV.vessel_eta_fdt,\r\n",
					"          VV.vessel_ata_fdt,\r\n",
					"          asnreceived_fdt,\r\n",
					"          IE.docreceived_fdt,\r\n",
					"          iE.dtdischarge,\r\n",
					"          IE.equipallocation_fdt,\r\n",
					"          IE.ready_fdt,\r\n",
					"          IE.equipdispatchin_fdt,\r\n",
					"          IE.equipeirin_fdt,\r\n",
					"          IE.equipeirout_fdt,\r\n",
					"          IE.equipportin_fdt,\r\n",
					"          IE.equipportout_fdt,\r\n",
					"          IE.equipyardin_fdt,\r\n",
					"          IE.equipyardout_fdt,\r\n",
					"          IE.equipempty_fdt,\r\n",
					"          IE.equipreload_fdt,\r\n",
					"          IE.equipdispatchout_fdt,\r\n",
					"          IE.los_dt\r\n",
					"--order by VV.vessel_eta_fdt desc\r\n",
					"\r\n",
					"\r\n",
					"    \r\n",
					"\t  \r\n",
					"\t\t\t \"\"\")\r\n",
					"display(main_result)\r\n",
					""
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(main_result.count())"
				],
				"execution_count": 32
			}
		]
	}
}